<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="WordPress Plugin PHPMD Ruleset"
         xmlns="http://pmd.sf.net/ruleset/1.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
         xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">

    <description>WordPress-compatible PHPMD rules - excludes naming conventions incompatible with WordPress coding standards</description>

    <!-- Clean Code Rules (with WordPress exceptions) -->
    <rule ref="rulesets/cleancode.xml">
        <!-- Exclude ElseExpression - WordPress often requires else for security patterns -->
        <exclude name="ElseExpression"/>
        <!-- Exclude MissingImport - WordPress core classes are auto-loaded -->
        <exclude name="MissingImport"/>
        <!-- Exclude StaticAccess - Allow for singleton patterns -->
        <exclude name="StaticAccess"/>
    </rule>
    
    <!-- Code Size Rules -->
    <rule ref="rulesets/codesize.xml">
        <!-- Override TooManyPublicMethods for WordPress plugins that need hook callbacks -->
        <exclude name="TooManyPublicMethods"/>
    </rule>
    
    <!-- Custom rule: Allow more public methods for WordPress plugins -->
    <rule ref="rulesets/codesize.xml/TooManyPublicMethods">
        <properties>
            <!-- WordPress plugins often need many public hook callbacks -->
            <property name="maxmethods" value="15"/>
        </properties>
    </rule>
    
    <!-- Controversial Rules (with WordPress exceptions) -->
    <rule ref="rulesets/controversial.xml">
        <!-- Exclude Superglobals - WordPress securely uses $_GET, $_POST, etc. -->
        <exclude name="Superglobals"/>
    </rule>
    
    <!-- Design Rules (with WordPress exceptions) -->
    <rule ref="rulesets/design.xml">
        <!-- Exclude ExitExpression - Required for WordPress file downloads and redirects -->
        <exclude name="ExitExpression"/>
    </rule>
    
    <!-- COMPLETELY DISABLE ALL NAMING RULES FOR WORDPRESS COMPATIBILITY -->
    <!-- WordPress uses snake_case naming which conflicts with PHPMD's camelCase requirements -->
    <!-- The following rules are intentionally NOT included: -->
    <!-- - CamelCaseClassName (WordPress allows Class_Name_With_Underscores) -->
    <!-- - CamelCaseMethodName (WordPress uses method_name_with_underscores) -->
    <!-- - CamelCaseVariableName (WordPress uses $variable_name_with_underscores) -->
    <!-- - CamelCaseParameterName (WordPress uses $parameter_name_with_underscores) -->
    <!-- - CamelCasePropertyName (WordPress uses $property_name_with_underscores) -->
    
    <!-- Import only safe naming rules that don't conflict with WordPress -->
    <rule ref="rulesets/naming.xml/ShortVariable">
        <properties>
            <property name="minimum" value="2"/>
        </properties>
    </rule>
    <rule ref="rulesets/naming.xml/LongVariable">
        <properties>
            <property name="maximum" value="30"/>
        </properties>
    </rule>
    <rule ref="rulesets/naming.xml/ShortMethodName">
        <properties>
            <property name="minimum" value="3"/>
        </properties>
    </rule>
    <rule ref="rulesets/naming.xml/ConstructorWithNameAsEnclosingClass"/>
    <rule ref="rulesets/naming.xml/ConstantNamingConventions"/>
    <rule ref="rulesets/naming.xml/BooleanGetMethodName"/>
    
    <!-- Unused Code Rules -->
    <rule ref="rulesets/unusedcode.xml"/>

    <!-- WordPress-specific exclusions -->
    <exclude-pattern>*/vendor/*</exclude-pattern>
    <exclude-pattern>*/node_modules/*</exclude-pattern>

</ruleset>